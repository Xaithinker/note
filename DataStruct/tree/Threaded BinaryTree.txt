线索二叉树 Threaded BinaryTree

问题的引出：当以二叉链表作为存储结构时，只能找到结点的左右孩子，不能直接得到结点在任意序列中的前驱和后继信息。
            这种信息只能在遍历的动态过程中才能得到。
对二叉树以某种次序遍历使其变为线索二叉树的过程叫作线索化。
在线索树上进行遍历，只要先找到序列中的第一个结点，然后依次找结点后继直至其后继为空时而止。

中序线索二叉树比其他线索二叉树较简单，且不需要设栈。遍历时间复杂度为O(n)，但常数因子小。且不需要设栈
因此，若在某程序中所用二叉树经常遍历或查找结点在遍历所得线性序列中的前驱和后继，则应采用线索链表作存储结构。

(##)n个结点的二叉链表中必定存在 n+1个空链域。由此利用这些空链域来存放结点的前驱和后继的信息。
证明：结点数 n = n1 + 2*n2 + 1 而空链域的存放位置数量(占据度为0或度为1的结点)即为 
      n1 + 2*n0= n1 + 2*n2 + 2 = n + 1   （而n0 = n2 + 1） 